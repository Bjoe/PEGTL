# Even when building with C++17 support, std::filesystem was not initially implemented
# in several common tool-chains, or it required additional build logic to enable it.
# This GitHub Action is supposed to test whether or not the fallback/configuration logic
# for that works in PEGTL.
name: std-filesystem-fallbacks

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  std-filesystem-fallback:
    name: ${{ matrix.os }}-fallback
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Run all of them once we start
      matrix:
        os:
          # These OSs have default tool-chains which don't support std::filesystem without
          # additional work in the CMake logic.
          - ubuntu-16.04
          - macos-10.15
        include:
          - os: ubuntu-16.04
            cxx: g++-7
            cc: gcc-7

    steps:
      - uses: actions/checkout@v2

      - name: Build and cache boost-filesystem
        uses: lukka/run-vcpkg@v6.0
        with:
          vcpkgGitCommitId: 0bf3923f9fab4001c00f0f429682a0853b5749e0
          vcpkgDirectory: ${{runner.workspace}}/vcpkg
          vcpkgArguments: boost-filesystem

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source 
        # and build directories, but this is only available with CMake 3.13 and higher.  
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE
        env:
          CXX: ${{matrix.cxx}}
          CC: ${{matrix.cc}}

      - name: Build the Project
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build .

      - name: Run the Tests
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest
